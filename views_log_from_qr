
@api_view(['GET'])
@authentication_classes([JWTAuthentication])
@permission_classes([IsAuthenticated])
def logs_from_qr_id(request, username, qr_ids):
    # workingSheetFromQRID method
    if request.method == 'GET':
        # Check if the requested username matches the logged-in user
        if request.user.username != username:
            return Response({'error': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

        if request.user.user_level_id > 3:
            return Response({'error': 'Unauthorized'}, status=status.HTTP_401_UNAUTHORIZED)

        # Split the input QR IDs separated by commas
        qr_id_list = qr_ids.split(',')

        logs_data = []
        errors = []
        working_sheet_records = []

        try:
            with transaction.atomic():
                # Generate lot_id dynamically with row-level locking
                latest_working_sheet = Working_Sheet_Log.objects.select_for_update().order_by('-lot_id').first()

                if latest_working_sheet and '-' in latest_working_sheet.lot_id:
                    lot_number = int(latest_working_sheet.lot_id.split('-')[1]) + 1
                else:
                    lot_number = 1

                new_lot_id = f"lot-{lot_number}"

            for qr_id in qr_id_list:
                # Validate each QR ID
                try:
                    
                    log = Master_Data.objects.get(qr_id=qr_id)
                    serializer = MasterDataSerializer(log)
                    if log.active ==1:
                        logs_data.append(serializer.data)

                        # Adding a record to working_sheet_log table
                        
                    else: 
                        error_message = f"[{log.visible_material_no}] - The log is not active "
                        errors.append(error_message)
                except Master_Data.DoesNotExist:
                    error_message = f'The log with QR ID [ {qr_id} ] does not exist.'
                    errors.append(error_message)
        
            if errors:
                # If there are errors, return them without logs and without saving to the working_sheet_log table
                return Response({'errors': errors}, status=status.HTTP_404_NOT_FOUND)

            for record in working_sheet_records:
                working_sheet_serializer = WorkingSheetLogSerializer(data=record)
                if working_sheet_serializer.is_valid():
                    working_sheet_serializer.save()

            return Response(logs_data, status=status.HTTP_200_OK)

        except Exception as e:
            error_message = str(e)
            logger.exception('Error in workingSheet (QR ID) method')
            return Response({'error': error_message}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
